package mail

import (
	"io/ioutil"
	"os"
	"testing"
	"net/textproto"

	"github.com/jhillyerd/enmime"
)

// Declare global variables
var path string

func WriteAndReadFileTeardown(t *testing.T) {
    // Your teardown code goes here
    // Remove the file at path
    err := os.Remove(path)
    if err != nil {
        t.Error("error removing file:", err)
    }
}

func TestWriteAndReadFile(t *testing.T) {
    content := "Hello, World!"
    path = "tmp_test_file"
    err := WriteFile(path, []byte(content))
    if err != nil {
        t.Error("error writing file:", err)
    }
    defer WriteAndReadFileTeardown(t)

    file, err := os.Open(path)
    if err != nil {
        t.Error("error opening file:", err)
    } else {
        defer file.Close()
        // Read file content
        data, err := ioutil.ReadAll(file)
        if err != nil {
            t.Error("error reading file:", err)
        }

        readContent := string(data)
        if readContent != content {
            t.Errorf("expected %s but got %s", content, readContent)
        }
    }
}
func TestBuildFileName(t *testing.T) {
	part := &enmime.Part{
		FileName: "",
		Header:   make(textproto.MIMEHeader),
	}
	part.Header.Set("Content-Type", "image/jpeg")

	radix := "test"
	index := 1

    expected := []string{"test-1-autogeneratedfilename.jpeg",
                        "test-1-autogeneratedfilename.jpg",
                        "test-1-autogeneratedfilename.jpe",
                        "test-1-autogeneratedfilename.jif",
                        "test-1-autogeneratedfilename.jfif" }
	result := BuildFileName(part, radix, index)

    found := false
    for _, e := range expected {
        if e == result {
            found = true
            break
        }
    }
    if !found {
        t.Errorf("expected %s but got %s", expected, result)
    }
}

func TestBuildFileName_NoContentType(t *testing.T) {
	part := &enmime.Part{
		FileName: "",
		Header:   make(textproto.MIMEHeader),
	}

	radix := "test"
	index := 1

	expected := "test-1-autogeneratedfilename.unspecified"
	result := BuildFileName(part, radix, index)

	if result != expected {
		t.Errorf("expected %s but got %s", expected, result)
	}
}

func TestBuildFileName_InvalidContentType(t *testing.T) {
	part := &enmime.Part{
		FileName: "",
		Header:   make(textproto.MIMEHeader),
	}
	part.Header.Set("Content-Type", "invalid")

	radix := "test"
	index := 1

	expected := "test-1-autogeneratedfilename.unidentified"
	result := BuildFileName(part, radix, index)

	if result != expected {
		t.Errorf("expected %s but got %s", expected, result)
	}
}

func TestBuildFileName_WithFileName(t *testing.T) {
	part := &enmime.Part{
		FileName: "custom_filename.txt",
		Header:   make(textproto.MIMEHeader),
	}

	radix := "test"
	index := 1

	expected := "custom_filename.txt"
	result := BuildFileName(part, radix, index)

	if result != expected {
		t.Errorf("expected %s but got %s", expected, result)
	}
}